#include <iostream> 
#include <fstream>

#define TINYPLY_IMPLEMENTATION
#include "hilma/io/tinyply.h"

#include "hilma/io/PlyOps.h"

namespace hilma {

bool PlyOps::save( const std::string& _filename, Mesh& _mesh, bool _binnary  ) {

    std::filebuf fb;
    fb.open(_filename.c_str(), std::ios::out | std::ios::binary);
    std::ostream outstream(&fb);
    if (outstream.fail()) throw std::runtime_error("failed to open " + _filename);

    tinyply::PlyFile file;

    file.add_properties_to_element("vertex", { "x", "y", "z" }, 
        tinyply::Type::FLOAT32, _mesh.vertices.size(), reinterpret_cast<uint8_t*>(_mesh.vertices.data()), tinyply::Type::INVALID, 0);

    if (_mesh.hasNormals())
        file.add_properties_to_element("vertex", { "nx", "ny", "nz" },
        tinyply::Type::FLOAT32, _mesh.normals.size(), reinterpret_cast<uint8_t*>(_mesh.normals.data()), tinyply::Type::INVALID, 0);

    if (_mesh.hasTexcoords())
        file.add_properties_to_element("vertex", { "u", "v" },
        tinyply::Type::FLOAT32, _mesh.texcoords.size() , reinterpret_cast<uint8_t*>(_mesh.texcoords.data()), tinyply::Type::INVALID, 0);

    if (_mesh.hasIndices()) {

        if (_mesh.getPrimitive() == TRIANGLES ) {
            std::vector<glm::ivec3> faces = _mesh.getTriangles();
            file.add_properties_to_element("face", { "vertex_indices" },
            tinyply::Type::UINT32, faces.size(), reinterpret_cast<uint8_t*>(faces.data()), tinyply::Type::UINT8, 3);
        }
        
    }

    file.get_comments().push_back("generated by Hilma");

    // Write file
    file.write(outstream, _binnary);

    return true;
}

}
